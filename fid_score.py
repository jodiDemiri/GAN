# -*- coding: utf-8 -*-
"""FID Score.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BmBDtSYJmitE0ynHeD3pzGmejTNRYze7
"""

import numpy as np
from numpy import cov
from numpy import trace
from numpy import iscomplexobj
from numpy import asarray
from numpy.random import shuffle
from scipy.linalg import sqrtm
from keras.applications.inception_v3 import InceptionV3
from keras.applications.inception_v3 import preprocess_input
from keras.datasets.mnist import load_data
from skimage.transform import resize

"""Checking the FID Score for Images from Epoch 300 compared to the entire original dataset


"""

# example of calculating the frechet inception distance in Keras for cifar10
 
# calculate frechet inception distance
def calculate_fid(model, images1, images2):
 # calculate activations
 act1 = model.predict(images1)
 act2 = model.predict(images2)
 # calculate mean and covariance statistics
 mu1, sigma1 = act1.mean(axis=0), cov(act1, rowvar=False)
 mu2, sigma2 = act2.mean(axis=0), cov(act2, rowvar=False)
 # calculate sum squared difference between means
 ssdiff = np.sum((mu1 - mu2)**2.0)
 # calculate sqrt of product between cov
 covmean = sqrtm(sigma1.dot(sigma2))
 # check and correct imaginary numbers from sqrt
 if iscomplexobj(covmean):
  covmean = covmean.real
 # calculate score
 fid = ssdiff + trace(sigma1 + sigma2 - 2.0 * covmean)
 return fid
 
# prepare the inception v3 model
model = InceptionV3(include_top=False, pooling='avg', input_shape=(512,512,3))
# load npy array for both image sets
# (images1, _), (images2, _) = cifar10.load_data()
images1 = np.load('/content/drive/MyDrive/Colab Notebooks/epoch300arr.npy')
images2 = np.load('/content/drive/MyDrive/Colab Notebooks/smaller512x512array.npy')
print('Loaded', images1.shape, images2.shape)
# convert integer to floating point values
# images1 = images1.astype('float32')
# images2 = images2.astype('float32')
# resize images
# images1 = scale_images(images1, (299,299,3))
# images2 = scale_images(images2, (299,299,3))
# print('Scaled', images1.shape, images2.shape)
# pre-process images
images1 = preprocess_input(images1)
images2 = preprocess_input(images2)
# calculate fid
fid = calculate_fid(model, images1, images2)
print('FID: %.3f' % fid)

"""Checking the FID Score for Images from Epoch 300 compared to the smaller dataset






"""

# example of calculating the frechet inception distance in Keras for cifar10
 
# calculate frechet inception distance
def calculate_fid(model, images1, images2):
 # calculate activations
 act1 = model.predict(images1)
 act2 = model.predict(images2)
 # calculate mean and covariance statistics
 mu1, sigma1 = act1.mean(axis=0), cov(act1, rowvar=False)
 mu2, sigma2 = act2.mean(axis=0), cov(act2, rowvar=False)
 # calculate sum squared difference between means
 ssdiff = np.sum((mu1 - mu2)**2.0)
 # calculate sqrt of product between cov
 covmean = sqrtm(sigma1.dot(sigma2))
 # check and correct imaginary numbers from sqrt
 if iscomplexobj(covmean):
  covmean = covmean.real
 # calculate score
 fid = ssdiff + trace(sigma1 + sigma2 - 2.0 * covmean)
 return fid
 
# prepare the inception v3 model
model = InceptionV3(include_top=False, pooling='avg', input_shape=(512,512,3))
# load npy array for both image sets
# (images1, _), (images2, _) = cifar10.load_data()
images1 = np.load('/content/drive/MyDrive/Colab Notebooks/epoch300arr.npy')
images2 = np.load('/content/drive/MyDrive/Colab Notebooks/25originalimgs.npy')
print('Loaded', images1.shape, images2.shape)
# convert integer to floating point values
# images1 = images1.astype('float32')
# images2 = images2.astype('float32')
# resize images
# images1 = scale_images(images1, (299,299,3))
# images2 = scale_images(images2, (299,299,3))
# print('Scaled', images1.shape, images2.shape)
# pre-process images
images1 = preprocess_input(images1)
images2 = preprocess_input(images2)
# calculate fid
fid = calculate_fid(model, images1, images2)
print('FID: %.3f' % fid)

"""Checking the FID Score for Images from Epoch 320 compared to the entire original dataset

"""

# example of calculating the frechet inception distance in Keras for cifar10
 
# calculate frechet inception distance
def calculate_fid(model, images1, images2):
 # calculate activations
 act1 = model.predict(images1)
 act2 = model.predict(images2)
 # calculate mean and covariance statistics
 mu1, sigma1 = act1.mean(axis=0), cov(act1, rowvar=False)
 mu2, sigma2 = act2.mean(axis=0), cov(act2, rowvar=False)
 # calculate sum squared difference between means
 ssdiff = np.sum((mu1 - mu2)**2.0)
 # calculate sqrt of product between cov
 covmean = sqrtm(sigma1.dot(sigma2))
 # check and correct imaginary numbers from sqrt
 if iscomplexobj(covmean):
  covmean = covmean.real
 # calculate score
 fid = ssdiff + trace(sigma1 + sigma2 - 2.0 * covmean)
 return fid
 
# prepare the inception v3 model
model = InceptionV3(include_top=False, pooling='avg', input_shape=(512,512,3))
# load npy array for both image sets
# (images1, _), (images2, _) = cifar10.load_data()
images1 = np.load('/content/drive/MyDrive/Colab Notebooks/epoch320arr.npy')
images2 = np.load('/content/drive/MyDrive/Colab Notebooks/smaller512x512array.npy')
print('Loaded', images1.shape, images2.shape)
# convert integer to floating point values
# images1 = images1.astype('float32')
# images2 = images2.astype('float32')
# resize images
# images1 = scale_images(images1, (299,299,3))
# images2 = scale_images(images2, (299,299,3))
# print('Scaled', images1.shape, images2.shape)
# pre-process images
images1 = preprocess_input(images1)
images2 = preprocess_input(images2)
# calculate fid
fid = calculate_fid(model, images1, images2)
print('FID: %.3f' % fid)

"""Checking the FID Score for Images from Epoch 320 compared to the smaller original dataset

"""

# example of calculating the frechet inception distance in Keras for cifar10
 
# calculate frechet inception distance
def calculate_fid(model, images1, images2):
 # calculate activations
 act1 = model.predict(images1)
 act2 = model.predict(images2)
 # calculate mean and covariance statistics
 mu1, sigma1 = act1.mean(axis=0), cov(act1, rowvar=False)
 mu2, sigma2 = act2.mean(axis=0), cov(act2, rowvar=False)
 # calculate sum squared difference between means
 ssdiff = np.sum((mu1 - mu2)**2.0)
 # calculate sqrt of product between cov
 covmean = sqrtm(sigma1.dot(sigma2))
 # check and correct imaginary numbers from sqrt
 if iscomplexobj(covmean):
  covmean = covmean.real
 # calculate score
 fid = ssdiff + trace(sigma1 + sigma2 - 2.0 * covmean)
 return fid
 
# prepare the inception v3 model
model = InceptionV3(include_top=False, pooling='avg', input_shape=(512,512,3))
# load npy array for both image sets
# (images1, _), (images2, _) = cifar10.load_data()
images1 = np.load('/content/drive/MyDrive/Colab Notebooks/epoch320arr.npy')
images2 = np.load('/content/drive/MyDrive/Colab Notebooks/25originalimgs.npy')
print('Loaded', images1.shape, images2.shape)
# convert integer to floating point values
# images1 = images1.astype('float32')
# images2 = images2.astype('float32')
# resize images
# images1 = scale_images(images1, (299,299,3))
# images2 = scale_images(images2, (299,299,3))
# print('Scaled', images1.shape, images2.shape)
# pre-process images
images1 = preprocess_input(images1)
images2 = preprocess_input(images2)
# calculate fid
fid = calculate_fid(model, images1, images2)
print('FID: %.3f' % fid)

"""Checking the FID Score for Images from Epoch 300 and 320 compared to the entire original dataset

"""

# example of calculating the frechet inception distance in Keras for cifar10
 
# calculate frechet inception distance
def calculate_fid(model, images1, images2):
 # calculate activations
 act1 = model.predict(images1)
 act2 = model.predict(images2)
 # calculate mean and covariance statistics
 mu1, sigma1 = act1.mean(axis=0), cov(act1, rowvar=False)
 mu2, sigma2 = act2.mean(axis=0), cov(act2, rowvar=False)
 # calculate sum squared difference between means
 ssdiff = np.sum((mu1 - mu2)**2.0)
 # calculate sqrt of product between cov
 covmean = sqrtm(sigma1.dot(sigma2))
 # check and correct imaginary numbers from sqrt
 if iscomplexobj(covmean):
  covmean = covmean.real
 # calculate score
 fid = ssdiff + trace(sigma1 + sigma2 - 2.0 * covmean)
 return fid
 
# prepare the inception v3 model
model = InceptionV3(include_top=False, pooling='avg', input_shape=(512,512,3))
# load npy array for both image sets
# (images1, _), (images2, _) = cifar10.load_data()
images1 = np.load('/content/drive/MyDrive/Colab Notebooks/epoch300320arr.npy')
images2 = np.load('/content/drive/MyDrive/Colab Notebooks/smaller512x512array.npy')
print('Loaded', images1.shape, images2.shape)
# convert integer to floating point values
# images1 = images1.astype('float32')
# images2 = images2.astype('float32')
# resize images
# images1 = scale_images(images1, (299,299,3))
# images2 = scale_images(images2, (299,299,3))
# print('Scaled', images1.shape, images2.shape)
# pre-process images
images1 = preprocess_input(images1)
images2 = preprocess_input(images2)
# calculate fid
fid = calculate_fid(model, images1, images2)
print('FID: %.3f' % fid)

"""Checking the FID Score for Images from Epoch 300 and 320 compared to the smaller original dataset"""

# example of calculating the frechet inception distance in Keras for cifar10
 
# calculate frechet inception distance
def calculate_fid(model, images1, images2):
 # calculate activations
 act1 = model.predict(images1)
 act2 = model.predict(images2)
 # calculate mean and covariance statistics
 mu1, sigma1 = act1.mean(axis=0), cov(act1, rowvar=False)
 mu2, sigma2 = act2.mean(axis=0), cov(act2, rowvar=False)
 # calculate sum squared difference between means
 ssdiff = np.sum((mu1 - mu2)**2.0)
 # calculate sqrt of product between cov
 covmean = sqrtm(sigma1.dot(sigma2))
 # check and correct imaginary numbers from sqrt
 if iscomplexobj(covmean):
  covmean = covmean.real
 # calculate score
 fid = ssdiff + trace(sigma1 + sigma2 - 2.0 * covmean)
 return fid
 
# prepare the inception v3 model
model = InceptionV3(include_top=False, pooling='avg', input_shape=(512,512,3))
# load npy array for both image sets
# (images1, _), (images2, _) = cifar10.load_data()
images1 = np.load('/content/drive/MyDrive/Colab Notebooks/epoch300320arr.npy')
images2 = np.load('/content/drive/MyDrive/Colab Notebooks/50originalimgs.npy')
print('Loaded', images1.shape, images2.shape)
# convert integer to floating point values
# images1 = images1.astype('float32')
# images2 = images2.astype('float32')
# resize images
# images1 = scale_images(images1, (299,299,3))
# images2 = scale_images(images2, (299,299,3))
# print('Scaled', images1.shape, images2.shape)
# pre-process images
images1 = preprocess_input(images1)
images2 = preprocess_input(images2)
# calculate fid
fid = calculate_fid(model, images1, images2)
print('FID: %.3f' % fid)